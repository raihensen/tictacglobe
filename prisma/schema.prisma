// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Session {
  id             Int         @id @default(autoincrement())
  isPublic       Boolean
  isFull         Boolean     @default(false)
  isAlive        Boolean     @default(true)
  invitationCode String?
  playingMode    PlayingMode
  games          Game[]      @relation("SessionGame")
  // currentGame    Game?       @relation("CurrentSessionGame", fields: [currentGameId], references: [id])
  // currentGameId  Int?        @unique
  users          User[]
  score1         Int         @default(0)
  score2         Int         @default(0)
  settings       String      @db.Text
  language       String      @default("en")
  createdAt      DateTime    @default(now())
}

model User {
  id        String    @id @default(uuid())
  name      String?
  createdAt DateTime  @default(now())
  sessions  Session[]
  markings  Marking[]
}

model Game {
  id                 Int       @id @default(autoincrement())
  setup              String    @db.Text
  language           String    @default("en")
  turn               Int
  state              GameState @default(Initialized)
  markings           Marking[]
  winner             Int?
  turnCounter        Int       @default(0)
  turnStartTimestamp DateTime  @default(now())
  createdAt          DateTime  @default(now())
  finishedAt         DateTime?

  session   Session @relation(name: "SessionGame", fields: [sessionId], references: [id])
  sessionId Int
  // sessionCurrentGame Session? @relation(name: "CurrentSessionGame")
}

enum PlayingMode {
  Offline
  Online
}

enum GameState {
  Initialized
  Running
  Decided // set as soon as a winner / draw is determined but the board is not full yet (might continue playing)
  Finished // only set if the board is fully marked
  Ended // After having clicked "End game", then show solutions
}

model Marking {
  id        Int      @id @default(autoincrement())
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int
  x         Int
  y         Int
  value     String
  // item      Item     @relation(fields: [itemId], references: [id])
  // itemId    Int
  player    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  isWinning Boolean  @default(false)
  createdAt DateTime @default(now())
}

// enum ItemType {
//   Country
// }

// model Item {
//   id   Int      @id @default(autoincrement())
//   type ItemType
//   key  String // country ISO code
//   name String

//   // countryData CountryData?
//   // markings Marking[]

//   @@index(fields: [type, key])
// }

// model CountryData {
//   id     Int  @id @default(autoincrement())
//   item   Item @relation(fields: [itemId], references: [id])
//   itemId Int  @unique

//   name             String
//   capital          String
//   population       Int
//   area             Int
//   flagColors       String // TODO comma-separated? JSON encoded?
//   maxElevation     Int
//   maxElevationName String
//   minElevation     Int
//   minElevationName String

//   // TODO
//   // alternative values
//   // multi-language
// }

// model CityData {
//   id     Int  @id @default(autoincrement())
//   item   Item @relation(fields: [itemId], references: [id])
//   itemId Int  @unique
//   // ...
// }
